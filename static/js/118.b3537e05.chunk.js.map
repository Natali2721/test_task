{"version":3,"file":"static/js/118.b3537e05.chunk.js","mappings":"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","sources":["components/ButtonLoadMore/ButtonLoadMore.js","Api/apiService.js","constans/limit.js","components/Card/Card.js","components/CardList/CardList.js","components/ButtonBack/ButtonBack.js","constans/selectOptions.js","pages/Tweets.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { LoadButton } from 'styles/Element.styled';\n\nconst ButtonLoadMore = ({ text, onClick }) => (\n  <LoadButton type=\"button\" onClick={onClick}>\n    {text}\n  </LoadButton>\n);\n\nButtonLoadMore.propTypes = {\n  text: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ButtonLoadMore;\n","import axios from 'axios';\nimport QUANTITY from 'constans/limit';\n\naxios.defaults.baseURL = 'https://639cb5e116d1763ab152294c.mockapi.io/users';\n\nconst fetchUsers = (page = 1) => {\n  return axios.get(`/?&limit=${QUANTITY}&page=${page}`);\n};\n\nconst fetchAllUsers = () => {\n  return axios.get();\n};\n\nexport { fetchUsers, fetchAllUsers };\n","const QUANTITY = 8;\n\nexport default QUANTITY;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Logo from 'images/logo.png';\nimport {\n  ContentBox,\n  ListItem,\n  AvatarBox,\n  LogoImg,\n  PictureBox,\n  Text,\n  AvatarImg,\n  Avatar,\n  Button,\n} from 'styles/Element.styled';\n\nconst Card = ({ id, tweets, avatar, initialFollowers, name }) => {\n  const [followers, setFollowers] = useState(initialFollowers);\n  //console.log(name);\n\n  useEffect(() => {\n    const storedFollowers = localStorage.getItem(`${id}`);\n    if (storedFollowers) {\n      setFollowers(parseInt(storedFollowers));\n    }\n  }, [id]);\n\n  useEffect(() => {\n    localStorage.setItem(`${id}`, followers.toString());\n  }, [followers, id]);\n\n  const getFollowers = followers => {\n    if (followers > 999) {\n      const str = followers.toString();\n      return str.slice(0, -3) + ',' + str.slice(-3);\n    } else {\n      return followers;\n    }\n  };\n\n  const getButtonStatus = followers => {\n    return followers === initialFollowers ? 'follow' : 'following';\n  };\n\n  const handleClick = () => {\n    if (followers === initialFollowers) {\n      setFollowers(prevState => prevState + 1);\n    } else {\n      setFollowers(prevState => prevState - 1);\n    }\n  };\n\n  const buttonStatus = getButtonStatus(followers);\n  //console.log(buttonStatus);\n\n  return (\n    <ListItem className={buttonStatus === name || name === 'all' ? '' : 'none'}>\n      <AvatarBox>\n        <PictureBox />\n        <LogoImg src={Logo} alt=\"Logo\" width=\"76px\" height=\"22px\" />\n        <Avatar>\n          <AvatarImg\n            src={avatar}\n            alt=\"Avatar\"\n            width=\"62px\"\n            height=\"62px\"\n          ></AvatarImg>\n        </Avatar>\n      </AvatarBox>\n      <ContentBox>\n        <Text>{tweets} tweets</Text>\n        <Text>{getFollowers(followers)} followers</Text>\n        <Button\n          onClick={handleClick}\n          name={buttonStatus}\n          className={buttonStatus === 'follow' ? '' : 'active'}\n        >\n          {buttonStatus}\n        </Button>\n      </ContentBox>\n    </ListItem>\n  );\n};\n\nCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  avatar: PropTypes.string.isRequired,\n  tweets: PropTypes.number.isRequired,\n  initialFollowers: PropTypes.number.isRequired,\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from 'components/Card/Card';\nimport { List } from 'styles/Element.styled';\n\nconst CardList = ({ users, selectedOption }) => {\n  return (\n    <List>\n      {users &&\n        users.map(({ avatar, id, tweets, followers }) => (\n          <Card\n            id={id}\n            key={id}\n            tweets={tweets}\n            initialFollowers={followers}\n            avatar={avatar}\n            name={selectedOption.value}\n          />\n        ))}\n    </List>\n  );\n};\n\nexport default CardList;\n","import { useLocation } from 'react-router-dom';\nimport { ButtonDirection, LinkBack } from 'styles/Element.styled';\nimport { HiArrowNarrowLeft } from 'react-icons/hi';\n\nconst BackButton = () => {\n  const location = useLocation();\n\n  return (\n    <ButtonDirection type=\"button\">\n      <LinkBack to={location.state?.from ?? '/'}>\n        <HiArrowNarrowLeft size={16} />\n        Go back\n      </LinkBack>\n    </ButtonDirection>\n  );\n};\n\nexport default BackButton;\n","const options = [\n  { value: 'all', label: 'all' },\n  { value: 'follow', label: 'follow' },\n  { value: 'following', label: 'following' },\n];\nexport default options;\n","import React, { useEffect, useState } from 'react';\nimport Notiflix from 'notiflix';\nimport QUANTITY from 'constans/limit';\nimport ButtonLoadMore from 'components/ButtonLoadMore/ButtonLoadMore';\nimport Loader from 'components/Loader/Loader';\nimport { fetchAllUsers, fetchUsers } from 'Api/apiService';\nimport { Container, SelectContainer, SelectText } from 'styles/Element.styled';\nimport CardList from 'components/CardList/CardList';\nimport BackButton from 'components/ButtonBack/ButtonBack';\nimport Select from 'react-select';\nimport options from 'constans/selectOptions';\n\nconst Tweets = () => {\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isActive, setIsActive] = useState(true);\n  const [selectedOption, setSelectedOption] = useState(options[0]);\n\n  useEffect(() => {\n    if (isActive === true) {\n      const update = async () => {\n        setIsLoading(true);\n        try {\n          await fetchUsers(page).then(res => {\n            if (!res.data.length) {\n              setIsActive(false);\n              return Notiflix.Notify.failure(\n                'Sorry, there isn`t any tweets yet'\n              );\n            }\n            if (res.data.length < QUANTITY) {\n              setIsActive(false);\n            }\n            setItems(prevState => [...prevState, ...res.data]);\n            setIsLoading(false);\n          });\n        } catch (error) {\n          console.log('Error');\n        } finally {\n          setIsLoading(false);\n        }\n      };\n      update();\n    }\n  }, [page, isActive]);\n\n  useEffect(() => {\n    if (selectedOption.value !== 'all') {\n      const update = async () => {\n        setIsLoading(true);\n        try {\n          await fetchAllUsers().then(res => {\n            console.log(res.data);\n            if (!res.data.length) {\n              setIsActive(false);\n              return Notiflix.Notify.failure(\n                'Sorry, there isn`t any tweets yet'\n              );\n            }\n            setItems(res.data);\n            setIsLoading(false);\n            setIsActive(false);\n          });\n        } catch (error) {\n          console.log('Error');\n        } finally {\n          setIsLoading(false);\n        }\n      };\n      update();\n    }\n    if (selectedOption.value === 'all') {\n      setIsActive(true);\n      setItems([]);\n      setPage(1);\n    }\n  }, [selectedOption]);\n\n  const onClickLoadMore = () => {\n    setPage(prevState => prevState + 1);\n  };\n\n  return (\n    <Container>\n      <BackButton />\n      <SelectContainer>\n        <SelectText>You can select tweets </SelectText>\n        <Select\n          defaultValue={selectedOption}\n          onChange={setSelectedOption}\n          options={options}\n        />\n      </SelectContainer>\n\n      {isLoading && <Loader />}\n      <CardList selectedOption={selectedOption} users={items} />\n      {isActive && (\n        <ButtonLoadMore text=\"Load More\" onClick={onClickLoadMore} />\n      )}\n    </Container>\n  );\n};\n\nexport default Tweets;\n"],"names":["text","onClick","type","axios","fetchUsers","page","id","tweets","avatar","initialFollowers","name","useState","followers","setFollowers","useEffect","storedFollowers","localStorage","getItem","parseInt","setItem","toString","buttonStatus","getButtonStatus","className","src","alt","width","height","str","slice","getFollowers","prevState","users","selectedOption","map","value","location","useLocation","to","state","from","size","label","items","setItems","setPage","isLoading","setIsLoading","isActive","setIsActive","options","setSelectedOption","update","then","res","data","length","Notiflix","console","log","defaultValue","onChange","Loader"],"sourceRoot":""}